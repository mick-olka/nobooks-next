create type public.app_role as enum ('admin', 'moderator', 'user');
create type public.wiki_type as enum ('region', 'wiki', 'feature', 'rule', 'history');

-- Create wiki table
create table public.wiki_pages (
  id uuid default gen_random_uuid() primary key,
  title text not null,
  content text not null,
  created_at timestamp with time zone default now(),
  updated_at timestamp with time zone default now(),
  created_by uuid references auth.users(id),
  last_modified_by uuid references auth.users(id),
  type wiki_type not null
);

-- USER ROLES
create table public.user_roles (
  id bigint generated by default as identity primary key,
  user_id uuid references auth.users on delete cascade not null,
  role app_role not null,
  unique (user_id, role)
);

-- Enable RLS
alter table public.wiki_pages enable row level security;
alter table public.user_roles enable row level security;

-- Secure the user_roles table
-- create policy "Only admins can manage roles"
--   on public.user_roles for all
--   using (
--     exists (
--       select 1 from public.user_roles
--       where user_roles.user_id = auth.uid()
--       and user_roles.role = 'admin'
--     )
--   );

-- Create separate policies for user_roles with a different approach
create policy "Admins can select user_roles"
  on public.user_roles for select
  using (true);  -- Allow reading roles for policies to work

create policy "Admins can insert user_roles"
  on public.user_roles for insert
  with check (
    exists (
      select 1 
      from public.user_roles ur
      where ur.user_id = auth.uid()
      and ur.role = 'admin'
    )
  );

create policy "Admins can update user_roles"
  on public.user_roles for update
  using (
    exists (
      select 1 
      from public.user_roles ur
      where ur.user_id = auth.uid()
      and ur.role = 'admin'
    )
  );

create policy "Admins can delete user_roles"
  on public.user_roles for delete
  using (
    exists (
      select 1 
      from public.user_roles ur
      where ur.user_id = auth.uid()
      and ur.role = 'admin'
    )
  );


-- Policies for wiki_pages
create policy "Anyone can view wiki pages"
  on public.wiki_pages for select
  to authenticated, anon
  using (true);

create policy "Moderators can update wiki pages"
  on public.wiki_pages for update
  using (
    exists (
      select 1 from public.user_roles
      where user_roles.user_id = auth.uid()
      and user_roles.role in ('admin', 'moderator')
    )
  );

create policy "Only admins can delete wiki pages"
  on public.wiki_pages for delete
  using (
    exists (
      select 1 from public.user_roles
      where user_roles.user_id = auth.uid()
      and user_roles.role = 'admin'
    )
  );

  -- Grant SELECT permission on user_roles to authenticated users
grant select on public.user_roles to authenticated;

-- The rest of your policies remain the same
create policy "Only admins can insert wiki pages"
  on public.wiki_pages for insert
  with check (
    exists (
      select 1 from public.user_roles
      where user_roles.user_id = auth.uid()
      and user_roles.role = 'admin'
    )
  );

create or replace function get_user_role()
returns public.app_role
language sql
security definer
as $$
  select role from public.user_roles where user_id = auth.uid();
$$;